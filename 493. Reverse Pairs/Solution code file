// Link for problem :- https://leetcode.com/problems/reverse-pairs/

// code --->

class Solution {
public:
    
    // Merge two subarrays L and M into arr
void merge(int arr[], int p, int q, int r,int& count) {
  
  // Create L ← A[p..q] and M ← A[q+1..r]
  int n1 = q - p + 1;
  int n2 = r - q;

  int L[n1], M[n2];

  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];

  // Maintain current index of sub-arrays and main array
  int i, j, k;
  i = 0;
  j = 0;
  k = p;

    // lets count reverse pairs
    for(i=0;i<n1;i++)
    {
        while(j<n2 && (long long int)L[i]>2*(long long int)M[j])
            j++;
        
        count+=j;
    }
  // Until we reach either end of either L or M, pick larger among
  // elements L and M and place them in the correct position at A[p..r]

    
  i = 0;
  j = 0;
  k = p;
  while (i < n1 && j < n2) {
      
      
      
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {     
      arr[k] = M[j];
      j++;
    }
    k++;
  }

  // When we run out of elements in either L or M,
  // pick up the remaining elements and put in A[p..r]
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}

// Divide the array into two subarrays, sort them and merge them
void mergeSort(int arr[], int l, int r,int& count) 
{
  if (l < r) 
  {
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m,count);
    mergeSort(arr, m + 1, r,count);
    merge(arr, l, m, r,count);
  }
}
    int reversePairs(vector<int>& nums) {
        int count=0;
        int* arr=new int[nums.size()];
        for(int i=0;i<nums.size();i++)
        {
            arr[i]=nums[i];
        }
        mergeSort(arr, 0,nums.size()-1,count);
        return count;
        
    }
};
